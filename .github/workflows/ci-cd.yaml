name: Build, Scan, and Deploy to EKS

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/nodeapp
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}

permissions:
  id-token: write
  contents: read

jobs:
  build-scan-and-push:
    name: Build, Scan, and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

      - name: Scan image for vulnerabilities with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

# NOTE: Since we can not directly deploy our application in the local Kind cluster using github actions cicd, 
# Hence For this part of the assignment lets assume we are deploying our application to AWS EKS.
# So these are the steps we need to configure in the ci-cd.yaml

  deploy: 
    name: Deploy to EKS
    needs: build-scan-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Kubernetes context
        uses: aws-actions/amazon-eks-set-context@v1
        with:
          cluster-name: ${{ env.EKS_CLUSTER_NAME }}

      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/hello-world-app hello-world-container=${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          kubectl rollout status deployment/hello-world-app

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed. Rolling back..."
          kubectl rollout undo deployment/hello-world-app